openapi: 3.0.1
info:
  title: Adatree ADR Platform Consent API
  description: 'Consent Dashboard REST APIs. This allows ADR / consumers to perform CDR consumer authorization flow with Data Holders'
  contact:
    name: Adatree
    email: engineering@adatree.com.au
  version: '1.1.0'
servers:
  - url: 'https://cdr-insights-prod.api.adatree.com.au'
    description: Server url
paths:
  /consents:
    get:
      security:
        - bearerAuth: [ 'consumer:consents:read', 'consents:read' ]
        - m2m: [ 'consents:read' ]
      tags:
        - Consent
      summary: Get Consents
      description: Get all consent records for this consumer
      operationId: findAllConsents
      parameters:
        - name: consumerId
          in: query
          description: |
            consumeId, please be kindly reminded of proper encoding as Id from some IDP could have special character like '|', which need be encoded as '%7c'. <br/>
            consumerId should only be used with machine token, otherwise it will be deemed BAD_REQUEST
          example: auth0%7c5fbc585628421a006e83d95d
          required: false
          schema:
            type: string
        - name: consentId
          in: query
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: false
          schema:
            type: string
        - name: cdrArrangementId
          in: query
          example: 45db4977-b12f-42bf-808d-2680eb4bd366
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          example: ACTIVE
          schema:
            type: string
            enum: [REQUESTED, ACTIVE, REVOKED, EXPIRED]
        - name: accessFrequency
          in: query
          required: false
          example: ONCE_OFF
          schema:
            type: string
            enum: [ONCE_OFF, ONGOING]
        - name: postUsageAction
          in: query
          required: false
          example: DELETION
          schema:
            type: string
            enum: [DELETION, DE_IDENTIFICATION]
        - name: directMarketingAllowed
          in: query
          required: false
          example: false
          schema:
            type: boolean
        - name: useCases
          description: UseCase ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: dataHolderBrandId
          in: query
          required: false
          example: 55b3299a-3e50-48a2-a190-cca263ccaba5
          schema:
            type: string
        - name: oldestCreated
          description: Constrain the consent with created time at or after this date/time. If absent defaults to newestCreated
            minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
            example: "1997-01-12T15:43:00.121Z"
        - name: newestCreated
          description: Constrain the consent with created time at or before this date/time. If absent defaults to today.
            Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
            example: "1997-01-12T15:43:00.121Z"
        - name: oldestRevoked
          description: Constrain the consent with revoked time at or after this date/time. If absent defaults to newestRevoked
            minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
            example: "1997-01-12T15:43:00.121Z"
        - name: newestRevoked
          description: Constrain the consent with revoked time at or before this date/time. If absent defaults to today.
            Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        - name: oldestSharingEndDate
          description: Constrain the consent with sharingEndDate time at or after this date/time. If absent defaults to newestSharingEndDate
            minus 90 days.  Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        - name: newestSharingEndDate
          description: Constrain the consent with sharingEndDate time at or before this date/time. If absent defaults to today.
            Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
            example: "1997-01-12T15:43:00.121Z"
        - name: externalId
          description: Constrain the consent by externalId
          in: query
          required: false
          schema:
            type: string
          example: an-external-id
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
    post:
      security:
        - bearerAuth: [ 'consumer:consents:write', 'consents:write' ]
        - m2m: [ 'consents:write' ]
      tags:
        - Consent
      summary: Create Consent
      description: Create a consent record for consumer
      operationId: createConsent
      parameters:
        - $ref: '#/components/parameters/HeaderConsumerUserAgent'
        - $ref: '#/components/parameters/HeaderConsumerIpAddress'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsent'
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        422:
          description: active consent exists for requested use case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/{consentId}:
    get:
      security:
        - bearerAuth: [ 'consumer:consents:read', 'consents:read' ]
        - m2m: [ 'consents:read' ]
      tags:
        - Consent
      summary: Get Consent
      description: Retreive a single consent record for this consumer
      operationId: findConsent
      parameters:
        - name: consentId
          in: path
          required: true
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    patch:
      security:
        - bearerAuth: [ 'consumer:consents:write', 'consents:write' ]
        - m2m: [ 'consents:write' ]
      tags:
        - Consent
      summary: Update a consent's via dashboard or back channel
      description: |
        <ul><li>Update postUsageAction, directMarketing option or sharing end date when a dashboard token is received</li><br/>
        <li>Update externalId when a machine (backchannel) token is received</li></ul>
      operationId: updateConsent
      parameters:
        - name: consentId
          in: path
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UpdateConsentConsumer'
                - $ref: '#/components/schemas/UpdateConsentMachine'
      responses:
        200:
          description: consent successfully updated
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
    delete:
      security:
        - bearerAuth: [ 'consumer:consents:write', 'consents:write' ]
        - m2m: [ 'consents:write' ]
      tags:
        - Consent
      summary: Revoke Consent
      description: Revoke a single consent record for this consumer
      operationId: revokeConsent
      parameters:
        - name: consentId
          in: path
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          required: true
          schema:
            type: string
      responses:
        200:
          description: default response
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/{consentId}/history:
    get:
      security:
        - m2m: ['consents:read']
      tags:
        - Consents
      summary: Get Consent History
      description: Retreive an individual consent record's change history
      operationId: getHistory
      parameters:
        - name: consentId
          in: path
          required: true
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          schema:
            type: string
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentHistoryResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/{consentId}/authorization:
    get:
      summary: Get Authorization Redirect URL for a Consent
      description: Get the authorization redirect URL to send the consumer to the data holder
      security:
        - bearerAuth: [ 'consumer:consents:read', 'consents:read' ]
        - m2m: [ 'consents:read' ]
      tags:
        - Consent Authorization
      operationId: getAuthorizationForConsent
      parameters:
        - name: consentId
          in: path
          required: true
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
          schema:
            type: string
        - name: state
          description: A state is generated by the consent user-agent (browser) and is used to bind the redirection response from a Data Holder with a user session as per https://openid.net/specs/openid-financial-api-part-1-1_0-final.html#public-client. It is sent in the authentication request, and is then also included redirect from the ADH to the ADR. This allows the ADR client application prevent CSRF attacks. Must be unique per authorization request.
          in: query
          required: false
          schema:
            type: string
        - name: redirectUri
          description: The URI to redirect to from the data holder when the consumer has finished data holder authentication. Must be from the list of redirect URIs configured at the ACCC register.
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: authorization link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentAuthorization'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        429:
          $ref: '#/components/responses/429RateLimited'
  /consents/events:
    get:
      security:
        - m2m: ['consents:read']
      tags:
        - Get consent events
      summary: Retrieve consent events
      operationId: getConsentEvents
      parameters:
        - name: oldest
          description: Constrain the consent event result list with timestamp at or after this date/time. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
            example: "2022-02-06T08:17:26Z"
        - name: newest
          description: Constrain the consent event result list with timestamp at or before this date/time. Format is aligned to DateTimeString common type
          in: query
          required: false
          schema:
            type: string
            format: date-time
            x-cds-type: DateTimeString
            example: "2022-02-01T15:43:00.121Z"
        - $ref: '#/components/parameters/ParamPage'
        - $ref: '#/components/parameters/ParamPageSize'
      callbacks:
        ConsentUpdated:
          $YourWebhookUrl:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ConsentEvent'
              responses:
                '200':
                  description: Your server returns this code if it accepts the callback
      responses:
        200:
          description: list of ConsentEvent with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentEventList'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
  /software-products/{softwareProductId}/data-holders:
    get:
      summary: Get Data Holders
      description: Get the list of available data holders for a software product
      security:
        - bearerAuth: [ 'consumer:data-holders:read', 'data-holders:read' ]
        - m2m: ['data-holders:read']
      tags:
        - Data Holders
      operationId: get data holders of a software product
      parameters:
        - name: softwareProductId
          description: |
            The identifier of the software product registered at the ACCC registry. <br/>
            The list of data holders returned is the list where dynamic client reigstration has been peformed at each data holder for this software product. <br/>
            The list of data holders for a use case can be restricted by management API at Use Case or Software Product level
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataHolder'
  /tokens:
    post:
      summary: Create Tokens
      description: Send the required parameters from the data holder to the ADR Platform backend to finish extablishing data access
      security:
        - bearerAuth: [ 'consumer:tokens:write', 'consumer_tokens_write', 'tokens:write', 'tokens_write' ]
        - m2m: [ 'tokens:write' ]
      tags:
        - Tokens
      operationId: persistToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authorization'
      responses:
        '200':
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreatedResponse'
  /use-cases:
    get:
      security:
        - bearerAuth: [ 'consumer:use-cases:read', 'use-cases:read' ]
        - m2m: [ 'use-cases:read' ]
      tags:
        - UseCase
      summary: Get Use-cases
      description: Get all use-cases that have been configured. A use case is your reason for requesting consent from a consumer e.g. a home loan assessment, a budgeting app.
      operationId: findAllUseCases
      responses:
        200:
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UseCaseResponse'
        401:
          $ref: '#/components/responses/401Unauthorised'
        403:
          $ref: '#/components/responses/403Forbidden'
        429:
          $ref: '#/components/responses/429RateLimited'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    m2m:
      type: oauth2
      description: Machine to machine OAuth2 to access infosec token service
      flows:
        clientCredentials:
          tokenUrl: https://adatree-nonprod-adr.auth.ap-southeast-2.amazoncognito.com/oauth2/token
          scopes:
            'authorizations:write': allow ADR to create a Authorisation Request for a consumer
            'tokens:write': allow ADR to create or update Authorisation Request
  schemas:
    Authorization:
      type: object
      required:
        - code
        - id_token
        - state
      properties:
        code:
          type: string
          description: Authorization code returned from the data holder that will be used as part of token request validation.
          example: lFDNAS-JVITGzvba3yXfrPR8hWZlCKy6nutbzrmXKop56"
        state:
          type: string
          description: The state is a parameter returned by the data holder that is used to prevent CSRF attacks. Must be unique per authorization request.
          example: f99953a5-49a5-497c-91b6-4bd14cdace74
        id_token:
          type: string
          description: ID Token value associated with the authenticated session that is returned from the data holder.
          example: eyJraWQiOiIxZTlnZGs3IiwiYWxnIjoiUl...
    TokenCreatedResponse:
      type: object
      properties:
        activeConsentId:
          type: string
          description: Identifier of the consent which has now been activated by the completion of the Authorization flow.
    UseCaseDataHolder:
      required:
        - dataHolderBrandId
        - brandName
        - logoUri
      type: object
      properties:
        dataHolderBrandId:
          type: string
          description: The identifier of the data holder you wish the consumer to authenticate with.
          example: 7ff47a14-28bd-4b04-b216-67b367713a38
        brandName:
          type: string
          description: The brand name of the data holder you wish the consumer to authenticate with.
          example: Westpac
        logoUri:
          type: string
          description: The logo URI of the data holder you wish the consumer to authenticate with.
          example: https://www.westpac.com.au/logo
    DataHolder:
      required:
        - brandName
        - dataHolderBrandId
        - logoUri
      type: object
      properties:
        dataHolderBrandId:
          type: string
          description: The ideintifier of the data holder you wish the consumer to authenitcate with.
          example: 7ff47a14-28bd-4b04-b216-67b367713a38
        brandName:
          type: string
          description: The brand name of the data holder you wish the consumer to authenitcate with.
          example: Westpac
        logoUri:
          type: string
          description: The logo URI of the data holder you wish the consumer to authenitcate with.
          example: https://www.westpac.com.au/logo
        sector:
          type: string
          example: banking
        scopesSupported:
          type: array
          example: ["bank:accounts.basic:read", "bank:accounts.detail:read", "bank:transactions:read", "bank:payees:read", "bank:regular_payments:read", "common:customer.basic:read", "common:customer.detail:read"]
          description: a list of Authorisation Scopes supported by data holder
          items:
            type: string
        meta:
          $ref: '#/components/schemas/MetaBanking'
    MetaBanking:
      type: object
      properties:
        bsbPrefix:
          type: array
          description: DEPRECATED. a list of bsb prefixes for a data-holder
          items:
            type: string
            description: first two or three digits that specify the financial institution.
    UpdateConsentConsumer:
      type: object
      properties:
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        directMarketingAllowed:
          type: boolean
          example: true
        sharingEndDate:
          type: string
          description: new sharing end date, will be validated against sharing duration options defined in chosen Use Case
          format: date-time
          x-cds-type: DateTimeString
          example: "2023-04-19T15:43:00.121Z"
    UpdateConsentMachine:
      type: object
      properties:
        externalId:
          type: string
          example: external-id-by-adatree-customer
    CreateConsent:
      type: object
      required: [sharingEndDate, dataHolderBrandId, useCaseId]
      properties:
        consumerEmail:
          type: string
          example: "consumer@example.com"
          description: this is required if chosen Use Case uses email as notification channel
        sharingEndDate:
          type: string
          description: sharing end date, will be validated against sharing duration options defined in chosen Use Case
          format: date-time
          x-cds-type: DateTimeString
          example: "2023-04-19T15:43:00.121Z"
        dataHolderBrandId:
          type: string
          example: 55b3299a-3e50-48a2-a190-cca263ccaba5
        useCaseId:
          type: string
          example: HOME_LOAN
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        directMarketingAllowed:
          type: boolean
          example: false
        externalId:
          type: string
          description: Adatree's customer can supply an externalId when creating consents to associate with records in its own system
          example: external-id-by-adatree-customer
        consumerId:
          type: string
          description: |
            consumeId, please be kindly reminded of proper encoding as Id from some IDP could have special character like '|', which need be encoded as '%7c'. <br/>
            consumerId is required (and only accepted) for backchannel consent creation
          example: auth0%7c5fbc585628421a006e83d95d
        grantee:
          $ref: '#/components/schemas/Grantee'
    ConsentAuthorization:
      type: object
      description: Authorization link for a Consent
      properties:
        uri:
          example: https://id.rab.sandbox.adatree.com.au/identity/authorization?response_type=code+id_token&client_id=abcdefg&request_uri=urn%3Aietf%3Aparams%3Aoauth%3Arequest_uri%3A-asdfasdfuhlkjshdf_akjsldflasjd&scope=openid+bank%3Aaccounts.basic%3Aread+bank%3Aaccounts.detail%3Aread+bank%3Atransactions%3Aread+common%3Acustomer.basic%3Aread
          type: string
    ConsentHistoryResponse:
      type: object
      properties:
        consents:
          type: array
          items:
            $ref: '#/components/schemas/ConsentResponse'
    ConsentResponse:
      type: object
      properties:
        version:
          type: integer
          format: int32
          example: 1.0
        created:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        revoked:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        lastNotificationSentAt:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "1997-01-12T15:43:00.121Z"
        firstDataCollection:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "2012-01-12T15:43:00.121Z"
        status:
          $ref: '#/components/schemas/Status'
        sharingEndDate:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "2023-04-19T15:43:00.121Z"
        consumerEmail:
          type: string
          example: "consumer@example.com"
        dataHolderName:
          type: string
          example: ANZ
        dataHolderBrandId:
          type: string
          example: f632041c-d7c8-4679-a165-aa406cd62b13
        dataHolderLogoUri:
          type: string
          example: https://www.abank.com.au/logo
        useCase:
          $ref: '#/components/schemas/UseCaseResponse'
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        consumerId:
          type: string
          example: abedfaas-asdfsf-4asdf-1465-sfsadf3413
        cdrArrangementId:
          type: string
          example: 86a5d068-447a-4765-95c2-6f5d85d9d658
        consentId:
          type: string
          example: 7c7853a6-5466-11eb-ae93-0242ac130002
        directMarketingAllowed:
          type: boolean
          example: false
        externalId:
          type: string
          description: Adatree's customer can supply an externalId when creating consents to associate with records in its own system
          example: external-id-by-adatree-customer
        grantee:
          $ref: '#/components/schemas/Grantee'
    ScopeResponse:
      type: object
      properties:
        name:
          type: string
          example: Bank account name, type and balance
        id:
          type: string
          example: bank:accounts.basic:read
        purpose:
          type: string
          example: "This will allow us to provide best of kind service"
        description:
          type: string
          example: This will allow us to access basic information about your accounts
        claims:
          type: array
          example: [ "Name of account", "Type of account", "Account balance"]
          items:
            type: string
        priority:
          type: integer
          example: 1
          format: int32
    ConsentEventData:
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/ConsentEvent'
    ConsentEvent:
      type: object
      required: [eventType, timestamp, cdrArrangementId, consumerId, consentId, postUsageAction]
      properties:
        eventId:
          type: string
          description: a UUID of the event that could be used for idempotent event processing
          example: 32dd2e21-e7c8-44b1-b379-39e2ccd7a097
        eventType:
          type: string
          description: |
            This identifies the different types of events through a consent's lifecycle. <br/>
            A consent becomes GRANTED after consumer consent with Data Holder<br/>
            it can be revoked by a consumer via ADR or Data Holder<br/>
            an ongoing consent will expire on (if it is not revoked prior to) sharing end date
            a once_off consent will expire within 24 hours after the consent is GRANTED
          enum: [GRANTED, REVOKED, EXPIRED]
        timestamp:
          type: string
          format: date-time
          x-cds-type: DateTimeString
          example: "2022-01-20T15:00:00.999Z"
        cdrArrangementId:
          type: string
          example: 854d862c-5466-11eb-ae93-0242ac130002
        consentId:
          type: string
          example: 148c9187-e52b-431f-9b24-7225e75ca2be
        consumerId:
          type: string
          example: abedfaas-asdfsf-4asdf-1465-sfsadf3413
        postUsageAction:
          $ref: '#/components/schemas/PostUsageAction'
        externalId:
          type: string
          example: external-id-by-adatree-customer
        sharingEndDate:
          type: string
          format: date-time
        consumerEmail:
          type: string
          example: "consumer@example.com"
    LinksPaginated:
      type: object
      required:
        - self
      properties:
        self:
          type: string
          description: Fully qualified link that generated the current response document.
            https://self.example.com.au will be converted to https://self.example.com.au?page=1&page-size=25
          example: https://self.example.com.au?page=3&page-size=25
          x-cds-type: URIString
        first:
          type: string
          description: URI to the first page of this set. Mandatory if this response is not the first page
          example: https://self.example.com.au?page=1&page-size=25
          x-cds-type: URIString
        prev:
          type: string
          description: URI to the previous page of this set. Mandatory if this response is not the first page
          example: https://self.example.com.au?page=2&page-size=25
          x-cds-type: URIString
        next:
          type: string
          description: URI to the next page of this set. Mandatory if this response is not the last page
          example: https://self.example.com.au?page=4&page-size=25
          x-cds-type: URIString
        last:
          type: string
          description: URI to the last page of this set. Mandatory if this response is not the last page
          example: https://self.example.com.au?page=15&page-size=25
          x-cds-type: URIString
      x-conditional:
        - prev
        - next
        - first
        - last
    MetaPaginated:
      type: object
      required:
        - totalPages
        - totalRecords
      properties:
        totalPages:
          type: integer
          description: The total number of pages in the full set.
          example: 4
          x-cds-type: NaturalNumber
        totalRecords:
          type: integer
          description: The total number of records in the full set.
          example: 95
          x-cds-type: NaturalNumber
    ConsentEventList:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          $ref: '#/components/schemas/ConsentEventData'
        links:
          $ref: '#/components/schemas/LinksPaginated'
        meta:
          $ref: '#/components/schemas/MetaPaginated'
    Grantee:
      type: object
      description: consent grantee that will access CDR data
      required: [name, licenceNumber]
      properties:
        name:
          type: string
          description: full name
          example: Bob the broker
        licenceNumber:
          type: string
          example: ACL001
          description: ACL number of consent grantee
    UseCaseResponse:
      type: object
      properties:
        id:
          type: string
          example: HOME_LOAN
        name:
          type: string
          example: Home Loan Assessment
        softwareProductId:
          type: string
          example: software product id
        description:
          type: string
          example: Data will be used to assess your eligibility for a home loan.
        priority:
          type: integer
          format: int32
          example: 1
        historicalCollectionPeriodInDays:
          type: integer
          format: int32
          example: 90
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeResponse'
        accessFrequency:
          $ref: '#/components/schemas/AccessFrequency'
        sharingDurations:
          type: array
          description: default to ["CUSTOM"] for Ongoing consent; default to ["ONCE_OFF"] for Once_off consent if not supplied
          items:
            $ref: '#/components/schemas/SharingDuration'
        dataHolders:
          description: list of data holders, can be configured via management API
          type: array
          items:
            $ref: '#/components/schemas/UseCaseDataHolder'
        industries:
          type: array
          description: list of industries this use-case applies to.
          items:
            $ref: '#/components/schemas/Industry'
        consumerType:
          $ref: '#/components/schemas/ConsumerType'
        osps:
          type: array
          description: list of OSPs used to provide this use case.
          items:
            $ref: '#/components/schemas/OutsourcedServiceProvider'
    ResponseErrorList:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ResponseErrorListErrors'
    ResponseErrorListErrors:
      required:
        - code
        - detail
        - title
      properties:
        code:
          type: string
          description: 'Error code'
          example: "0001"
        title:
          type: string
          description: 'Title of invalid parameter or payload property'
          example: "status"
        detail:
          type: string
          description: 'detailed error message'
          example: "invalid status"
        meta:
          type: object
          description: Optional additional data for specific error types
          properties: {}
    # enum
    AccessFrequency:
      type: string
      example: ONCE_OFF
      enum:
        - ONCE_OFF
        - ONGOING
    NotificationType:
      type: string
      example: EMAIL
      enum:
        - EMAIL
        - SMS
    PostUsageAction:
      type: string
      example: DELETION
      enum:
        - DELETION
        - DE_IDENTIFICATION
    Status:
      type: string
      example: ACTIVE
      enum:
        - REQUESTED
        - ACTIVE
        - EXPIRED
        - REVOKED
    SharingDuration:
      type: string
      description: |
        sharingDuration for Once_off consent can only be "ONCE_OFF" <br/>
        sharingDuration for Ongoing consent could be one of predefined sharing durations or "CUSTOM" <br/>
        "CUSTOM" (Ongoing consent) means a consumer is free to choose a sharingEndDate
      example: ONE_YEAR
      enum:
        - ONE_DAY
        - ONE_WEEK
        - TWO_WEEKS
        - ONE_MONTH
        - THREE_MONTHS
        - SIX_MONTHS
        - NINE_MONTHS
        - ONE_YEAR
        - CUSTOM
        - ONCE_OFF
    ConsumerType:
      type: string
      description: |
        consumer types that will be consenting to the various scopes (data clusters)
      example: INDIVIDUAL
      enum:
        - ALL
        - INDIVIDUAL
        - ORGANISATION
        - ANY
    Industry:
      type: string
      example: ACTIVE
      enum:
        - BANKING
        - ENERGY
    OutsourcedServiceProvider:
      required:
        - providerName
        - serviceDescription
      type: object
      properties:
        providerName:
          type: string
          description: The consumer facing name of the service provider.
          example: Adatree
        serviceDescription:
          type: string
          description: The consumer facing description of what the service provider does as part of supporting the use case.
          example: Adatree's Data Recipient Platform is a turnkey SaaS solution providing CDR as a Service.
        accreditationId:
          type: string
          description: The ACCC issued Accreditation ID if applicable. Normally only applied to OSPs for data collection e.g. Adatree.
          example: ADRBNK000071
        cdrPolicyUri:
          type: string
          description: The logo URI of the data holder you wish the consumer to authenticate with.
          example: https://adatree.com.au/cdr-policy
  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    401Unauthorised:
      description: Unauthorised
    403Forbidden:
      description: Forbidden
    404NotFound:
      description: The specified resource was not found.
    400BadRequest:
      description: Request is invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseErrorList'
    429RateLimited:
      description: Ratelimit reached
    GenericError:
      description: An error occurred.
      content:
        application/json:
          schema:
            type: string
            example: something went wrong
  #-------------------------------
  # Reusable parameters
  #-------------------------------
  parameters:
    ParamPage:
      name: page
      in: query
      description: Page of results to request (standard pagination)
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
        example: 1
        x-cds-type: PositiveInteger
    ParamPageSize:
      name: page-size
      in: query
      description: Page size to request. Default is 25 (standard pagination)
      schema:
        type: integer
        default: 25
        minimum: 1
        example: 25
        x-cds-type: PositiveInteger            
    HeaderConsumerUserAgent:
      name: Adatree-Consumer-User-Agent
      in: header
      description: Mandatory for calls using a Machine token. The consumer's original User Agent header
      schema:
        type: string
        example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36
    HeaderConsumerIpAddress:
      name: Adatree-Consumer-Ip-Address
      in: header
      description: Mandatory for calls using a Machine token. The consumer's original IP address.
      schema:
        type: string
        example: 127.0.0.1
